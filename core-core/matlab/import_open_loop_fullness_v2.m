function [ArrayLengthBlocks, BlockSizeint32_tElements, BalancingNOPs, InitialNOPs, CheckPeriod, SteadyClockWalltimems, ClockCyclesCycleTimems, Clockrdtsc, ExpectedBlockIDCore4, StartBlockIDCore4, EndBlockIDCore4, ErroredCore4, ErrorSourceCore4, TransactionCore4, ExpectedBlockIDCore5, StartBlockIDCore5, EndBlockIDCore5, ErroredCore5, ErrorSourceCore5, TransactionCore5, FullnessStartCore5, FullnessEndCore5] = import_open_loop_fullness_v2(filename, dataLines)
%IMPORTFILE Import data from a text file
%  [ARRAYLENGTHBLOCKS, BLOCKSIZEINT32_TELEMENTS, BALANCINGNOPS,
%  INITIALNOPS, CHECKPERIOD, STEADYCLOCKWALLTIMEMS,
%  CLOCKCYCLESCYCLETIMEMS, CLOCKRDTSC, EXPECTEDBLOCKIDCORE4,
%  STARTBLOCKIDCORE4, ENDBLOCKIDCORE4, ERROREDCORE4, ERRORSOURCECORE4,
%  TRANSACTIONCORE4, EXPECTEDBLOCKIDCORE5, STARTBLOCKIDCORE5,
%  ENDBLOCKIDCORE5, ERROREDCORE5, ERRORSOURCECORE5, TRANSACTIONCORE5,
%  FULLNESSSTARTCORE5, FULLNESSENDCORE5] = IMPORTFILE(FILENAME) reads
%  data from text file FILENAME for the default selection.  Returns the
%  data as column vectors.
%
%  [ARRAYLENGTHBLOCKS, BLOCKSIZEINT32_TELEMENTS, BALANCINGNOPS,
%  INITIALNOPS, CHECKPERIOD, STEADYCLOCKWALLTIMEMS,
%  CLOCKCYCLESCYCLETIMEMS, CLOCKRDTSC, EXPECTEDBLOCKIDCORE4,
%  STARTBLOCKIDCORE4, ENDBLOCKIDCORE4, ERROREDCORE4, ERRORSOURCECORE4,
%  TRANSACTIONCORE4, EXPECTEDBLOCKIDCORE5, STARTBLOCKIDCORE5,
%  ENDBLOCKIDCORE5, ERROREDCORE5, ERRORSOURCECORE5, TRANSACTIONCORE5,
%  FULLNESSSTARTCORE5, FULLNESSENDCORE5] = IMPORTFILE(FILE, DATALINES)
%  reads data for the specified row interval(s) of text file FILENAME.
%  Specify DATALINES as a positive scalar integer or a N-by-2 array of
%  positive scalar integers for dis-contiguous row intervals.
%
%  Example:
%  [ArrayLengthBlocks, BlockSizeint32_tElements, BalancingNOPs, InitialNOPs, CheckPeriod, SteadyClockWalltimems, ClockCyclesCycleTimems, Clockrdtsc, ExpectedBlockIDCore4, StartBlockIDCore4, EndBlockIDCore4, ErroredCore4, ErrorSourceCore4, TransactionCore4, ExpectedBlockIDCore5, StartBlockIDCore5, EndBlockIDCore5, ErroredCore5, ErrorSourceCore5, TransactionCore5, FullnessStartCore5, FullnessEndCore5] = importfile("/Users/cyarp/git/benchmarking-github/core-core/results/bwrc-sr-amd-32c/open_loop/results_open_loop_single_point_tracker_4096_100trials_255blockArray_initCond_cpuOfflineOnline_reboot/report_open_loop_fullness_tracker_raw.csv", [2, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 17-Jan-2020 22:03:25

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

%% Setup the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 22);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["ArrayLengthBlocks", "BlockSizeint32_tElements", "BalancingNOPs", "InitialNOPs", "CheckPeriod", "SteadyClockWalltimems", "ClockCyclesCycleTimems", "Clockrdtsc", "ExpectedBlockIDCore4", "StartBlockIDCore4", "EndBlockIDCore4", "ErroredCore4", "ErrorSourceCore4", "TransactionCore4", "ExpectedBlockIDCore5", "StartBlockIDCore5", "EndBlockIDCore5", "ErroredCore5", "ErrorSourceCore5", "TransactionCore5", "FullnessStartCore5", "FullnessEndCore5"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "categorical", "categorical", "double", "double", "double", "double", "categorical", "categorical", "double", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["FullnessStartCore5", "FullnessEndCore5"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["ErroredCore4", "ErrorSourceCore4", "ErroredCore5", "ErrorSourceCore5", "FullnessStartCore5", "FullnessEndCore5"], "EmptyFieldRule", "auto");

% Import the data
tbl = readtable(filename, opts);

%% Convert to output type
ArrayLengthBlocks = tbl.ArrayLengthBlocks;
BlockSizeint32_tElements = tbl.BlockSizeint32_tElements;
BalancingNOPs = tbl.BalancingNOPs;
InitialNOPs = tbl.InitialNOPs;
CheckPeriod = tbl.CheckPeriod;
SteadyClockWalltimems = tbl.SteadyClockWalltimems;
ClockCyclesCycleTimems = tbl.ClockCyclesCycleTimems;
Clockrdtsc = tbl.Clockrdtsc;
ExpectedBlockIDCore4 = tbl.ExpectedBlockIDCore4;
StartBlockIDCore4 = tbl.StartBlockIDCore4;
EndBlockIDCore4 = tbl.EndBlockIDCore4;
ErroredCore4 = tbl.ErroredCore4;
ErrorSourceCore4 = tbl.ErrorSourceCore4;
TransactionCore4 = tbl.TransactionCore4;
ExpectedBlockIDCore5 = tbl.ExpectedBlockIDCore5;
StartBlockIDCore5 = tbl.StartBlockIDCore5;
EndBlockIDCore5 = tbl.EndBlockIDCore5;
ErroredCore5 = tbl.ErroredCore5;
ErrorSourceCore5 = tbl.ErrorSourceCore5;
TransactionCore5 = tbl.TransactionCore5;
FullnessStartCore5 = tbl.FullnessStartCore5;
FullnessEndCore5 = tbl.FullnessEndCore5;
end